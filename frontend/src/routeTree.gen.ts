/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as ProfileUsernameImport } from './routes/profile.$username'
import { Route as ArticlesCreateImport } from './routes/articles.create'
import { Route as ArticlesSlugImport } from './routes/articles.$slug'
import { Route as ProfileUsernameFavoritesImport } from './routes/profile.$username.favorites'
import { Route as ArticlesSlugEditImport } from './routes/articles.$slug.edit'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileUsernameRoute = ProfileUsernameImport.update({
  id: '/profile/$username',
  path: '/profile/$username',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesCreateRoute = ArticlesCreateImport.update({
  id: '/articles/create',
  path: '/articles/create',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesSlugRoute = ArticlesSlugImport.update({
  id: '/articles/$slug',
  path: '/articles/$slug',
  getParentRoute: () => rootRoute,
} as any)

const ProfileUsernameFavoritesRoute = ProfileUsernameFavoritesImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => ProfileUsernameRoute,
} as any)

const ArticlesSlugEditRoute = ArticlesSlugEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => ArticlesSlugRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/articles/$slug': {
      id: '/articles/$slug'
      path: '/articles/$slug'
      fullPath: '/articles/$slug'
      preLoaderRoute: typeof ArticlesSlugImport
      parentRoute: typeof rootRoute
    }
    '/articles/create': {
      id: '/articles/create'
      path: '/articles/create'
      fullPath: '/articles/create'
      preLoaderRoute: typeof ArticlesCreateImport
      parentRoute: typeof rootRoute
    }
    '/profile/$username': {
      id: '/profile/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof ProfileUsernameImport
      parentRoute: typeof rootRoute
    }
    '/articles/$slug/edit': {
      id: '/articles/$slug/edit'
      path: '/edit'
      fullPath: '/articles/$slug/edit'
      preLoaderRoute: typeof ArticlesSlugEditImport
      parentRoute: typeof ArticlesSlugImport
    }
    '/profile/$username/favorites': {
      id: '/profile/$username/favorites'
      path: '/favorites'
      fullPath: '/profile/$username/favorites'
      preLoaderRoute: typeof ProfileUsernameFavoritesImport
      parentRoute: typeof ProfileUsernameImport
    }
  }
}

// Create and export the route tree

interface ArticlesSlugRouteChildren {
  ArticlesSlugEditRoute: typeof ArticlesSlugEditRoute
}

const ArticlesSlugRouteChildren: ArticlesSlugRouteChildren = {
  ArticlesSlugEditRoute: ArticlesSlugEditRoute,
}

const ArticlesSlugRouteWithChildren = ArticlesSlugRoute._addFileChildren(
  ArticlesSlugRouteChildren,
)

interface ProfileUsernameRouteChildren {
  ProfileUsernameFavoritesRoute: typeof ProfileUsernameFavoritesRoute
}

const ProfileUsernameRouteChildren: ProfileUsernameRouteChildren = {
  ProfileUsernameFavoritesRoute: ProfileUsernameFavoritesRoute,
}

const ProfileUsernameRouteWithChildren = ProfileUsernameRoute._addFileChildren(
  ProfileUsernameRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/articles/$slug': typeof ArticlesSlugRouteWithChildren
  '/articles/create': typeof ArticlesCreateRoute
  '/profile/$username': typeof ProfileUsernameRouteWithChildren
  '/articles/$slug/edit': typeof ArticlesSlugEditRoute
  '/profile/$username/favorites': typeof ProfileUsernameFavoritesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/articles/$slug': typeof ArticlesSlugRouteWithChildren
  '/articles/create': typeof ArticlesCreateRoute
  '/profile/$username': typeof ProfileUsernameRouteWithChildren
  '/articles/$slug/edit': typeof ArticlesSlugEditRoute
  '/profile/$username/favorites': typeof ProfileUsernameFavoritesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/articles/$slug': typeof ArticlesSlugRouteWithChildren
  '/articles/create': typeof ArticlesCreateRoute
  '/profile/$username': typeof ProfileUsernameRouteWithChildren
  '/articles/$slug/edit': typeof ArticlesSlugEditRoute
  '/profile/$username/favorites': typeof ProfileUsernameFavoritesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/settings'
    | '/articles/$slug'
    | '/articles/create'
    | '/profile/$username'
    | '/articles/$slug/edit'
    | '/profile/$username/favorites'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/settings'
    | '/articles/$slug'
    | '/articles/create'
    | '/profile/$username'
    | '/articles/$slug/edit'
    | '/profile/$username/favorites'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/settings'
    | '/articles/$slug'
    | '/articles/create'
    | '/profile/$username'
    | '/articles/$slug/edit'
    | '/profile/$username/favorites'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  SettingsRoute: typeof SettingsRoute
  ArticlesSlugRoute: typeof ArticlesSlugRouteWithChildren
  ArticlesCreateRoute: typeof ArticlesCreateRoute
  ProfileUsernameRoute: typeof ProfileUsernameRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  SettingsRoute: SettingsRoute,
  ArticlesSlugRoute: ArticlesSlugRouteWithChildren,
  ArticlesCreateRoute: ArticlesCreateRoute,
  ProfileUsernameRoute: ProfileUsernameRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/register",
        "/settings",
        "/articles/$slug",
        "/articles/create",
        "/profile/$username"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/articles/$slug": {
      "filePath": "articles.$slug.tsx",
      "children": [
        "/articles/$slug/edit"
      ]
    },
    "/articles/create": {
      "filePath": "articles.create.tsx"
    },
    "/profile/$username": {
      "filePath": "profile.$username.tsx",
      "children": [
        "/profile/$username/favorites"
      ]
    },
    "/articles/$slug/edit": {
      "filePath": "articles.$slug.edit.tsx",
      "parent": "/articles/$slug"
    },
    "/profile/$username/favorites": {
      "filePath": "profile.$username.favorites.tsx",
      "parent": "/profile/$username"
    }
  }
}
ROUTE_MANIFEST_END */
