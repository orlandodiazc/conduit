/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { useMutation } from '@tanstack/react-query'
import { createArticle } from '../clients/createArticle.ts'
import type client from '@kubb/plugin-client/clients/axios'
import type {
  CreateArticle401,
  CreateArticle422,
  CreateArticleMutationRequest,
  CreateArticleMutationResponse,
} from '../types/CreateArticle.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { QueryClient, UseMutationOptions } from '@tanstack/react-query'

export const createArticleMutationKey = () => [{ url: '/articles' }] as const

export type CreateArticleMutationKey = ReturnType<
  typeof createArticleMutationKey
>

/**
 * @description Create an article. Auth is required
 * @summary Create an article
 * {@link /articles}
 */
export function useCreateArticle<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateArticleMutationResponse,
      ResponseErrorConfig<CreateArticle401 | CreateArticle422>,
      { data: CreateArticleMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateArticleMutationRequest>> & {
      client?: typeof client
    }
  } = {},
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {}
  const mutationKey = mutationOptions.mutationKey ?? createArticleMutationKey()

  return useMutation<
    CreateArticleMutationResponse,
    ResponseErrorConfig<CreateArticle401 | CreateArticle422>,
    { data: CreateArticleMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return createArticle(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
