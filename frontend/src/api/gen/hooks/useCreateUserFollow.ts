/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { useMutation } from '@tanstack/react-query'
import { createUserFollow } from '../clients/createUserFollow.ts'
import type client from '@kubb/plugin-client/clients/axios'
import type {
  CreateUserFollow400,
  CreateUserFollow404,
  CreateUserFollowMutationResponse,
  CreateUserFollowPathParams,
} from '../types/CreateUserFollow.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { QueryClient, UseMutationOptions } from '@tanstack/react-query'

export const createUserFollowMutationKey = () =>
  [{ url: '/profiles/{username}/follow' }] as const

export type CreateUserFollowMutationKey = ReturnType<
  typeof createUserFollowMutationKey
>

/**
 * {@link /profiles/:username/follow}
 */
export function useCreateUserFollow<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateUserFollowMutationResponse,
      ResponseErrorConfig<CreateUserFollow400 | CreateUserFollow404>,
      { username: CreateUserFollowPathParams['username'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {}
  const mutationKey =
    mutationOptions.mutationKey ?? createUserFollowMutationKey()

  return useMutation<
    CreateUserFollowMutationResponse,
    ResponseErrorConfig<CreateUserFollow400 | CreateUserFollow404>,
    { username: CreateUserFollowPathParams['username'] },
    TContext
  >(
    {
      mutationFn: async ({ username }) => {
        return createUserFollow(username, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
