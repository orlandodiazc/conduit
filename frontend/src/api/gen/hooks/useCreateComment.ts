/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  CreateCommentMutationRequest,
  CreateCommentMutationResponse,
  CreateCommentPathParams,
  CreateComment400,
  CreateComment404,
} from '../types/CreateComment.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { createComment } from '../clients/createComment.ts'
import { useMutation } from '@tanstack/react-query'

export const createCommentMutationKey = () =>
  [{ url: '/articles/{articleId}/comments' }] as const

export type CreateCommentMutationKey = ReturnType<
  typeof createCommentMutationKey
>

/**
 * {@link /articles/:articleId/comments}
 */
export function useCreateComment<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateCommentMutationResponse,
      ResponseErrorConfig<CreateComment400 | CreateComment404>,
      {
        articleId: CreateCommentPathParams['articleId']
        data: CreateCommentMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateCommentMutationRequest>> & {
      client?: typeof client
    }
  } = {},
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? createCommentMutationKey()

  return useMutation<
    CreateCommentMutationResponse,
    ResponseErrorConfig<CreateComment400 | CreateComment404>,
    {
      articleId: CreateCommentPathParams['articleId']
      data: CreateCommentMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ articleId, data }) => {
        return createComment(articleId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
