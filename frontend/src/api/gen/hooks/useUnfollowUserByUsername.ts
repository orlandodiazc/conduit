/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { useMutation } from '@tanstack/react-query'
import { unfollowUserByUsername } from '../clients/unfollowUserByUsername.ts'
import type client from '@kubb/plugin-client/clients/axios'
import type {
  UnfollowUserByUsername401,
  UnfollowUserByUsername422,
  UnfollowUserByUsernameMutationResponse,
  UnfollowUserByUsernamePathParams,
} from '../types/UnfollowUserByUsername.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { QueryClient, UseMutationOptions } from '@tanstack/react-query'

export const unfollowUserByUsernameMutationKey = () =>
  [{ url: '/profiles/{username}/follow' }] as const

export type UnfollowUserByUsernameMutationKey = ReturnType<
  typeof unfollowUserByUsernameMutationKey
>

/**
 * @description Unfollow a user by username
 * @summary Unfollow a user
 * {@link /profiles/:username/follow}
 */
export function useUnfollowUserByUsername<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UnfollowUserByUsernameMutationResponse,
      ResponseErrorConfig<
        UnfollowUserByUsername401 | UnfollowUserByUsername422
      >,
      { username: UnfollowUserByUsernamePathParams['username'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {}
  const mutationKey =
    mutationOptions.mutationKey ?? unfollowUserByUsernameMutationKey()

  return useMutation<
    UnfollowUserByUsernameMutationResponse,
    ResponseErrorConfig<UnfollowUserByUsername401 | UnfollowUserByUsername422>,
    { username: UnfollowUserByUsernamePathParams['username'] },
    TContext
  >(
    {
      mutationFn: async ({ username }) => {
        return unfollowUserByUsername(username, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
