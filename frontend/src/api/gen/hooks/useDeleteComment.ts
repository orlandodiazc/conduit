/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { useMutation } from '@tanstack/react-query'
import { deleteComment } from '../clients/deleteComment.ts'
import type client from '@kubb/plugin-client/clients/axios'
import type {
  DeleteComment400,
  DeleteComment404,
  DeleteCommentMutationResponse,
  DeleteCommentPathParams,
} from '../types/DeleteComment.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { QueryClient, UseMutationOptions } from '@tanstack/react-query'

export const deleteCommentMutationKey = () =>
  [{ url: '/comments/{id}' }] as const

export type DeleteCommentMutationKey = ReturnType<
  typeof deleteCommentMutationKey
>

/**
 * {@link /comments/:id}
 */
export function useDeleteComment<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteCommentMutationResponse,
      ResponseErrorConfig<DeleteComment400 | DeleteComment404>,
      { id: DeleteCommentPathParams['id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {}
  const mutationKey = mutationOptions.mutationKey ?? deleteCommentMutationKey()

  return useMutation<
    DeleteCommentMutationResponse,
    ResponseErrorConfig<DeleteComment400 | DeleteComment404>,
    { id: DeleteCommentPathParams['id'] },
    TContext
  >(
    {
      mutationFn: async ({ id }) => {
        return deleteComment(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
