/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RegisterMutationRequest,
  RegisterMutationResponse,
  Register400,
  Register404,
} from '../types/Register.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { register } from '../clients/register.ts'
import { useMutation } from '@tanstack/react-query'

export const registerMutationKey = () => [{ url: '/users' }] as const

export type RegisterMutationKey = ReturnType<typeof registerMutationKey>

/**
 * {@link /users}
 */
export function useRegister<TContext>(
  options: {
    mutation?: UseMutationOptions<
      RegisterMutationResponse,
      ResponseErrorConfig<Register400 | Register404>,
      { data: RegisterMutationRequest },
      TContext
    > & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<RegisterMutationRequest>> & {
      client?: typeof client
    }
  } = {},
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? registerMutationKey()

  return useMutation<
    RegisterMutationResponse,
    ResponseErrorConfig<Register400 | Register404>,
    { data: RegisterMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return register(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
