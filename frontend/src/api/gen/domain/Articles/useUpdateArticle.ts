/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { useMutation } from '@tanstack/react-query'
import { updateArticle } from '../../clients/updateArticle.ts'
import type client from '@kubb/plugin-client/clients/axios'
import type {
  UpdateArticle401,
  UpdateArticle422,
  UpdateArticleMutationRequest,
  UpdateArticleMutationResponse,
  UpdateArticlePathParams,
} from '../../types/UpdateArticle.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { QueryClient, UseMutationOptions } from '@tanstack/react-query'

export const updateArticleMutationKey = () =>
  [{ url: '/articles/{slug}' }] as const

export type UpdateArticleMutationKey = ReturnType<
  typeof updateArticleMutationKey
>

/**
 * @description Update an article. Auth is required
 * @summary Update an article
 * {@link /articles/:slug}
 */
export function useUpdateArticle<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateArticleMutationResponse,
      ResponseErrorConfig<UpdateArticle401 | UpdateArticle422>,
      {
        slug: UpdateArticlePathParams['slug']
        data: UpdateArticleMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateArticleMutationRequest>> & {
      client?: typeof client
    }
  } = {},
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {}
  const mutationKey = mutationOptions.mutationKey ?? updateArticleMutationKey()

  return useMutation<
    UpdateArticleMutationResponse,
    ResponseErrorConfig<UpdateArticle401 | UpdateArticle422>,
    {
      slug: UpdateArticlePathParams['slug']
      data: UpdateArticleMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ slug, data }) => {
        return updateArticle(slug, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
