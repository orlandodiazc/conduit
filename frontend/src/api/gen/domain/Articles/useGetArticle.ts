/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { queryOptions } from '@tanstack/react-query'
import { getArticle } from '../../clients/getArticle.ts'
import type client from '@kubb/plugin-client/clients/axios'
import type {
  GetArticle422,
  GetArticlePathParams,
  GetArticleQueryResponse,
} from '../../types/GetArticle.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'

export const getArticleQueryKey = ({
  slug,
}: {
  slug: GetArticlePathParams['slug']
}) => [{ url: '/articles/:slug', params: { slug: slug } }] as const

export type GetArticleQueryKey = ReturnType<typeof getArticleQueryKey>

export function getArticleQueryOptions(
  { slug }: { slug: GetArticlePathParams['slug'] },
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getArticleQueryKey({ slug })
  return queryOptions<
    GetArticleQueryResponse,
    ResponseErrorConfig<GetArticle422>,
    GetArticleQueryResponse,
    typeof queryKey
  >({
    enabled: !!slug,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getArticle({ slug }, config)
    },
  })
}
