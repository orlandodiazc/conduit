/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { useMutation } from '@tanstack/react-query'
import { login } from '../../clients/login.ts'
import type client from '@kubb/plugin-client/clients/axios'
import type {
  Login401,
  Login422,
  LoginMutationRequest,
  LoginMutationResponse,
} from '../../types/Login.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { QueryClient, UseMutationOptions } from '@tanstack/react-query'

export const loginMutationKey = () => [{ url: '/users/login' }] as const

export type LoginMutationKey = ReturnType<typeof loginMutationKey>

/**
 * @description Login for existing user
 * @summary Existing user login
 * {@link /users/login}
 */
export function useLogin<TContext>(
  options: {
    mutation?: UseMutationOptions<
      LoginMutationResponse,
      ResponseErrorConfig<Login401 | Login422>,
      { data: LoginMutationRequest },
      TContext
    > & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<LoginMutationRequest>> & {
      client?: typeof client
    }
  } = {},
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {}
  const mutationKey = mutationOptions.mutationKey ?? loginMutationKey()

  return useMutation<
    LoginMutationResponse,
    ResponseErrorConfig<Login401 | Login422>,
    { data: LoginMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return login(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
