/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { useMutation } from '@tanstack/react-query'
import { createUser } from '../../clients/createUser.ts'
import type client from '@kubb/plugin-client/clients/axios'
import type {
  CreateUser422,
  CreateUserMutationRequest,
  CreateUserMutationResponse,
} from '../../types/CreateUser.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { QueryClient, UseMutationOptions } from '@tanstack/react-query'

export const createUserMutationKey = () => [{ url: '/users' }] as const

export type CreateUserMutationKey = ReturnType<typeof createUserMutationKey>

/**
 * @description Register a new user
 * {@link /users}
 */
export function useCreateUser<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateUserMutationResponse,
      ResponseErrorConfig<CreateUser422>,
      { data: CreateUserMutationRequest },
      TContext
    > & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<CreateUserMutationRequest>> & {
      client?: typeof client
    }
  } = {},
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {}
  const mutationKey = mutationOptions.mutationKey ?? createUserMutationKey()

  return useMutation<
    CreateUserMutationResponse,
    ResponseErrorConfig<CreateUser422>,
    { data: CreateUserMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return createUser(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
