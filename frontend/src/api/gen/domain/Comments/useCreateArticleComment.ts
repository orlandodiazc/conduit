/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { useMutation } from '@tanstack/react-query'
import { createArticleComment } from '../../clients/createArticleComment.ts'
import type client from '@kubb/plugin-client/clients/axios'
import type {
  CreateArticleComment401,
  CreateArticleComment422,
  CreateArticleCommentMutationRequest,
  CreateArticleCommentMutationResponse,
  CreateArticleCommentPathParams,
} from '../../types/CreateArticleComment.ts'
import type {
  RequestConfig,
  ResponseErrorConfig,
} from '@kubb/plugin-client/clients/axios'
import type { QueryClient, UseMutationOptions } from '@tanstack/react-query'

export const createArticleCommentMutationKey = () =>
  [{ url: '/articles/{slug}/comments' }] as const

export type CreateArticleCommentMutationKey = ReturnType<
  typeof createArticleCommentMutationKey
>

/**
 * @description Create a comment for an article. Auth is required
 * @summary Create a comment for an article
 * {@link /articles/:slug/comments}
 */
export function useCreateArticleComment<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateArticleCommentMutationResponse,
      ResponseErrorConfig<CreateArticleComment401 | CreateArticleComment422>,
      {
        slug: CreateArticleCommentPathParams['slug']
        data: CreateArticleCommentMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateArticleCommentMutationRequest>> & {
      client?: typeof client
    }
  } = {},
) {
  const {
    mutation: { client: queryClient, ...mutationOptions } = {},
    client: config = {},
  } = options ?? {}
  const mutationKey =
    mutationOptions.mutationKey ?? createArticleCommentMutationKey()

  return useMutation<
    CreateArticleCommentMutationResponse,
    ResponseErrorConfig<CreateArticleComment401 | CreateArticleComment422>,
    {
      slug: CreateArticleCommentPathParams['slug']
      data: CreateArticleCommentMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ slug, data }) => {
        return createArticleComment({ slug, data }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
